

# Love Matcher

A public algorithm for matchmaking to help adults find love, marry, and raise children.

## Project Structure

```
love-matcher/
├── api/
│   ├── __init__.py
│   ├── api_server.py
│   ├── models.py
│   └── utils.py
├── tests/
│   └── test_integration.py
├── scripts/
│   ├── generate_simulated_data.py
│   └── train_retention_model.py
├── frontend/
│   ├── index.html
│   ├── styles.css
│   └── script.js
├── requirements.txt
└── README.md
```

## Key Components

1. `api_server.py`: Main Flask application with API endpoints.
2. `models.py`: Data models for User, Match, and Message, including Redis operations.
3. `utils.py`: Utility functions for matching algorithm and compatibility scoring.
4. `test_integration.py`: Integration tests for the API.
5. `generate_simulated_data.py`: Script to generate simulated user data.
6. `train_retention_model.py`: Script to train the user retention model.
7. Frontend files: `index.html`, `styles.css`, and `script.js` for the web interface.

## Setup

1. Install dependencies:
   ```
   pip install -r requirements.txt
   ```

2. Set up Redis:
   Make sure Redis is installed and running on your system.

3. Run the application:
   ```
   python api/api_server.py
   ```

## API Endpoints

- `GET /ping`: Health check
- `POST /api/users`: Create a new user
- `GET /api/users/<user_id>`: Get user profile
- `DELETE /api/users/<user_id>`: Delete user account
- `PUT /api/users/<user_id>/preferences`: Update user preferences
- `GET /api/matches/<user_id>`: Get matches for a user
- `POST /api/matches/<user_id>/create`: Create a new match
- `POST /api/matches/<match_id>/complete`: Complete an existing match
- `GET /api/matches/<user_id>/<match_id>/profile`: Get match user profile
- `POST /api/matches/<user_id>/outcome`: Set match outcome
- `POST /api/messages`: Send a message
- `GET /api/messages/<user_id>`: Get messages for a user
- `GET /api/users/<user_id>/stats`: Get user statistics

## Testing

Run integration tests using:
```
python -m pytest tests/test_integration.py
```

## Data Generation and Model Training

- Generate simulated data:
  ```
  python scripts/generate_simulated_data.py
  ```

- Train the retention model:
  ```
  python scripts/train_retention_model.py
  ```

## Frontend

To run the frontend, simply open the `frontend/index.html` file in a web browser. Make sure to update the `API_URL` in `script.js` to point to your running backend server.

## Contributing

Please read [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of conduct and the process for submitting pull requests.

## License

This project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details.from flask import Flask, jsonify, request
from flask_redis import FlaskRedis
import os
from models import User, Match, Message
from utils import create_match

app = Flask(__name__)
app.config['REDIS_URL'] = os.environ.get('REDIS_URL', 'redis://localhost:6379')
redis_client = FlaskRedis(app)

@app.route('/ping', methods=['GET'])
def ping():
    return jsonify({"message": "pong"})

@app.route('/api/users', methods=['POST'])
def create_user():
    data = request.json
    user = User(data['name'], data['age'], data['preferences'], is_simulated=data.get('is_simulated', False))
    user.save(redis_client)
    return jsonify(user.to_dict()), 201

@app.route('/api/users/<user_id>', methods=['GET'])
def get_user(user_id):
    user = User.get(redis_client, user_id)
    if user:
        return jsonify(user.to_dict())
    return jsonify({'error': 'User not found'}), 404

@app.route('/api/users/<user_id>', methods=['DELETE'])
def delete_user(user_id):
    if User.delete(redis_client, user_id):
        return jsonify({'message': 'User deleted successfully'})
    return jsonify({'error': 'User not found'}), 404

@app.route('/api/users/<user_id>/preferences', methods=['PUT'])
def update_preferences(user_id):
    data = request.json
    user = User.get(redis_client, user_id)
    if user:
        user.update_preferences(redis_client, data)
        return jsonify({'message': 'Preferences updated successfully'})
    return jsonify({'error': 'User not found'}), 404

@app.route('/api/matches/<user_id>', methods=['GET'])
def get_matches(user_id):
    user = User.get(redis_client, user_id)
    if user:
        matches = Match.get_user_matches(redis_client, user_id, user.is_simulated)
        return jsonify([match.to_dict() for match in matches])
    return jsonify({'message': 'No matches found'}), 404

@app.route('/api/matches/<user_id>/create', methods=['POST'])
def create_new_match(user_id):
    match = create_match(redis_client, user_id)
    if match:
        return jsonify(match), 201
    return jsonify({'message': 'Unable to create a match at this time'}), 400

@app.route('/api/matches/<match_id>/complete', methods=['POST'])
def complete_existing_match(match_id):
    match = Match.get(redis_client, match_id)
    if match:
        if match.complete(redis_client):
            return jsonify({'message': 'Match completed successfully'})
    return jsonify({'error': 'Match not found or already completed'}), 404

@app.route('/api/matches/<user_id>/<match_id>/profile', methods=['GET'])
def get_match_user_profile(user_id, match_id):
    match = Match.get(redis_client, match_id)
    if match:
        profile = match.get_profile(redis_client, user_id)
        if profile:
            return jsonify(profile)
    return jsonify({'error': 'Match not found or not completed'}), 404

@app.route('/api/matches/<user_id>/outcome', methods=['POST'])
def set_match_outcome(user_id):
    data = request.json
    match = Match.get(redis_client, data['match_id'])
    if match:
        if match.record_outcome(redis_client, data['outcome']):
            if data['outcome'] == 'accepted':
                match.complete(redis_client)
            return jsonify({'message': 'Match outcome recorded successfully'})
    return jsonify({'error': 'Match not found'}), 404

@app.route('/api/messages', methods=['POST'])
def send_message():
    data = request.json
    from_user = User.get(redis_client, data['from'])
    to_user = User.get(redis_client, data['to'])
    
    if not from_user or not to_user:
        return jsonify({'error': 'User not found'}), 404
    
    if from_user.is_simulated != to_user.is_simulated:
        return jsonify({'error': 'Cannot send messages between simulated and real users'}), 400
    
    message = Message(data['from'], data['to'], data['content'], is_simulated=from_user.is_simulated)
    message.save(redis_client)
    return jsonify({'message': 'Message sent successfully'})

@app.route('/api/messages/<user_id>', methods=['GET'])
def get_messages(user_id):
    other_user_id = request.args.get('other_user_id')
    user = User.get(redis_client, user_id)
    other_user = User.get(redis_client, other_user_id)
    
    if not user or not other_user:
        return jsonify({'error': 'User not found'}), 404
    
    messages = Message.get_conversation(redis_client, user_id, other_user_id, user.is_simulated)
    return jsonify([message.to_dict() for message in messages])

@app.route('/api/users/<user_id>/stats', methods=['GET'])
def user_stats(user_id):
    user = User.get(redis_client, user_id)
    if user:
        stats = user.get_stats(redis_client)
        return jsonify(stats)
    return jsonify({'error': 'User not found'}), 404

if __name__ == '__main__':
    app.run(debug=True)# Love Matcher

A public algorithm for matchmaking to help adults find love, marry, and raise children.

## Project Structure

```
love-matcher/
├── api/
│   ├── __init__.py
│   ├── api_server.py
│   ├── models.py
│   └── utils.py
├── tests/
│   └── test_iimport requests
import unittest
import random

BASE_URL = 'http://localhost:5000'

class TestLoveMatcherAPI(unittest.TestCase):
    def setUp(self):
        self.session = requests.Session()

    def test_ping(self):
        response = self.session.get(f'{BASE_URL}/ping')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json(), {'message': 'pong'})

    def create_user(self, is_simulated=False):
        user_data = {
            'name': f'Test User {random.randint(1000, 9999)}',
            'age': random.randint(18, 65),
            'preferences': {
                'max_age_difference': random.randint(1, 20),
                'interests': random.sample(['reading', 'hiking', 'movies', 'cooking', 'travel'], k=3),
                'location': random.choice(['New York', 'Los Angeles', 'Chicago']),
                'relationship_goal': random.choice(['casual', 'long-term', 'friendship']),
                'education_level': random.choice(['high school', 'bachelor', 'master', 'phd'])
            },
            'is_simulated': is_simulated
        }
        response = self.session.post(f'{BASE_URL}/api/users', json=user_data)
        self.assertEqual(response.status_code, 201)
        return response.json()

    def test_user_lifecycle(self):
        # Create user
        user = self.create_user()
        user_id = user['id']

        # Get user
        response = self.session.get(f'{BASE_URL}/api/users/{user_id}')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json()['name'], user['name'])

        # Update user preferences
        new_preferences = {
            'max_age_difference': 7,
            'interests': ['reading', 'hiking', 'traveling']
        }
        response = self.session.put(f'{BASE_URL}/api/users/{user_id}/preferences', json=new_preferences)
        self.assertEqual(response.status_code, 200)

        # Verify updated preferences
        response = self.session.get(f'{BASE_URL}/api/users/{user_id}')
        self.assertEqual(response.status_code, 200)
        self.assertEqual(response.json()['preferences']['max_age_difference'], 7)
        self.assertEqual(set(response.json()['preferences']['interests']), set(['reading', 'hiking', 'traveling']))

        # Delete user
        response = self.session.delete(f'{BASE_URL}/api/users/{user_id}')
        self.assertEqual(response.status_code, 200)

        # Verify user is deleted
        response = self.session.get(f'{BASE_URL}/api/users/{user_id}')
        self.assertEqual(response.status_code, 404)

    def test_matching_and_messaging(self):
        # Create two users
        user1 = self.create_user()
        user2 = self.create_user()

        # Get match for user1
        response = self.session.get(f'{BASE_URL}/api/matches/{user1["id"]}')
        self.assertEqual(response.status_code, 200)
        match = response.json()
        self.assertIn('match_id', match)

        # Record match outcome
        outcome_data = {
            'match_id': match['match_id'],
            'outcome': 'accepted'
        }
        response = self.session.post(f'{BASE_URL}/api/matches/{user1["id"]}/outcome', json=outcome_data)
        self.assertEqual(response.status_code, 200)

        # Send a message
        message_data = {
            'to': match['match_id'],
            'content': 'Hello, nice to meet you!',
            'timestamp': 1635724800  # Example timestamp
        }
        response = self.session.post(f'{BASE_URL}/api/messages/{user1["id"]}', json=message_data)
        self.assertEqual(response.status_code, 200)

        # Get messages
        response = self.session.get(f'{BASE_URL}/api/messages/{match["match_id"]}?match_id={user1["id"]}')
        self.assertEqual(response.status_code, 200)
        messages = response.json()
        self.assertEqual(len(messages), 1)
        self.assertEqual(messages[0]['content'], 'Hello, nice to meet you!')

        # Clean up
        self.session.delete(f'{BASE_URL}/api/users/{user1["id"]}')
        self.session.delete(f'{BASE_URL}/api/users/{user2["id"]}')

    def test_simulated_user_separation(self):
        real_user = self.create_user(is_simulated=False)
        simulated_user = self.create_user(is_simulated=True)

        # Try to get a match for the real user
        response = self.session.get(f'{BASE_URL}/api/matches/{real_user["id"]}')
        self.assertEqual(response.status_code, 200)
        match = response.json()
        
        if 'match_id' in match:
            # If a match is found, ensure it's not the simulated user
            self.assertNotEqual(match['match_id'], simulated_user['id'])
        else:
            # If no match is found, that's also acceptable
            self.assertIn('message', match)

        # Clean up
        self.session.delete(f'{BASE_URL}/api/users/{real_user["id"]}')
        self.session.delete(f'{BASE_URL}/api/users/{simulated_user["id"]}')

if __name__ == '__main__':
    unittest.main()import uuid
import json
from datetime import datetime

class User:
    HASH_KEY_REAL = "REDHASH_USER_REAL"
    HASH_KEY_SIMULATED = "REDHASH_USER_SIMULATED"

    def __init__(self, name, age, preferences, user_id=None, is_simulated=False):
        self.id = user_id or str(uuid.uuid4())
        self.name = name
        self.age = age
        self.preferences = preferences or {
            'max_age_difference': 5,
            'interests': [],
            'location': '',
            'relationship_goal': '',
            'education_level': ''
        }
        self.is_simulated = is_simulated

    def to_dict(self):
        return {
            'id': self.id,
            'name': self.name,
            'age': self.age,
            'preferences': self.preferences,
            'is_simulated': self.is_simulated
        }

    def save(self, redis_client):
        hash_key = self.HASH_KEY_SIMULATED if self.is_simulated else self.HASH_KEY_REAL
        redis_client.hset(hash_key, self.id, json.dumps(self.to_dict()))

    @classmethod
    def get(cls, redis_client, user_id):
        user_data = redis_client.hget(cls.HASH_KEY_REAL, user_id)
        if not user_data:
            user_data = redis_client.hget(cls.HASH_KEY_SIMULATED, user_id)
        
        if user_data:
            data = json.loads(user_data)
            return cls(data['name'], data['age'], data['preferences'], data['id'], data['is_simulated'])
        return None

    @classmethod
    def get_all(cls, redis_client, include_simulated=False):
        real_users = [cls.get(redis_client, uid) for uid in redis_client.hkeys(cls.HASH_KEY_REAL)]
        if include_simulated:
            simulated_users = [cls.get(redis_client, uid) for uid in redis_client.hkeys(cls.HASH_KEY_SIMULATED)]
            return real_users + simulated_users
        return real_users

    @classmethod
    def delete(cls, redis_client, user_id):
        if redis_client.hdel(cls.HASH_KEY_REAL, user_id) == 0:
            return redis_client.hdel(cls.HASH_KEY_SIMULATED, user_id) > 0
        return True

class Match:
    HASH_KEY_REAL = "REDHASH_MATCH_REAL"
    HASH_KEY_SIMULATED = "REDHASH_MATCH_SIMULATED"

    def __init__(self, user1_id, user2_id, match_score, match_id=None, is_simulated=False):
        self.id = match_id or str(uuid.uuid4())
        self.user1_id = user1_id
        self.user2_id = user2_id
        self.match_score = match_score
        self.created_at = datetime.now().isoformat()
        self.is_simulated = is_simulated

    def to_dict(self):
        return {
            'id': self.id,
            'user1_id': self.user1_id,
            'user2_id': self.user2_id,
            'match_score': self.match_score,
            'created_at': self.created_at,
            'is_simulated': self.is_simulated
        }

    def save(self, redis_client):
        hash_key = self.HASH_KEY_SIMULATED if self.is_simulated else self.HASH_KEY_REAL
        redis_client.hset(hash_key, self.id, json.dumps(self.to_dict()))

    @classmethod
    def get(cls, redis_client, match_id):
        match_data = redis_client.hget(cls.HASH_KEY_REAL, match_id)
        if not match_data:
            match_data = redis_client.hget(cls.HASH_KEY_SIMULATED, match_id)
        
        if match_data:
            data = json.loads(match_data)
            return cls(data['user1_id'], data['user2_id'], data['match_score'], data['id'], data['is_simulated'])
        return None

    @classmethod
    def get_user_matches(cls, redis_client, user_id, is_simulated):
        hash_key = cls.HASH_KEY_SIMULATED if is_simulated else cls.HASH_KEY_REAL
        all_matches = [json.loads(match) for match in redis_client.hvals(hash_key)]
        return [cls(**match) for match in all_matches if match['user1_id'] == user_id or match['user2_id'] == user_id]

class Message:
    HASH_KEY_REAL = "REDHASH_MESSAGE_REAL"
    HASH_KEY_SIMULATED = "REDHASH_MESSAGE_SIMULATED"

    def __init__(self, from_user_id, to_user_id, content, message_id=None, is_simulated=False):
        self.id = message_id or str(uuid.uuid4())
        self.from_user_id = from_user_id
        self.to_user_id = to_user_id
        self.content = content
        self.timestamp = datetime.now().isoformat()
        self.is_simulated = is_simulated

    def to_dict(self):
        return {
            'id': self.id,
            'from_user_id': self.from_user_id,
            'to_user_id': self.to_user_id,
            'content': self.content,
            'timestamp': self.timestamp,
            'is_simulated': self.is_simulated
        }

    def save(self, redis_client):
        hash_key = self.HASH_KEY_SIMULATED if self.is_simulated else self.HASH_KEY_REAL
        redis_client.hset(hash_key, self.id, json.dumps(self.to_dict()))

    @classmethod
    def get(cls, redis_client, message_id):
        message_data = redis_client.hget(cls.HASH_KEY_REAL, message_id)
        if not message_data:
            message_data = redis_client.hget(cls.HASH_KEY_SIMULATED, message_id)
        
        if message_data:
            data = json.loads(message_data)
            return cls(data['from_user_id'], data['to_user_id'], data['content'], data['id'], data['is_simulated'])
        return None

    @classmethod
    def get_conversation(cls, redis_client, user1_id, user2_id, is_simulated):
        hash_key = cls.HASH_KEY_SIMULATED if is_simulated else cls.HASH_KEY_REAL
        all_messages = [json.loads(msg) for msg in redis_client.hvals(hash_key)]
        return [cls(**msg) for msg in all_messages if 
                (msg['from_user_id'] == user1_id and msg['to_user_id'] == user2_id) or 
                (msg['from_user_id'] == user2_id and msg['to_user_id'] == user1_id)]const API_URL = 'https://api.love-matcher.com';
const clerk = window.Clerk;

async function initializeClerk() {
    await clerk.load({
        frontendApi: 'YOUR_FRONTEND_API_KEY'
    });

    const userStatus = document.getElementById('user-status');
    const loginContainer = document.getElementById('login-container');
    const content = document.getElementById('content');

    if (clerk.user) {
        userStatus.textContent = `Logged in as: ${clerk.user.firstName}`;
        content.style.display = 'block';
        loginContainer.style.display = 'none';
    } else {
        userStatus.textContent = 'Not logged in';
        content.style.display = 'none';
        loginContainer.style.display = 'block';
        const signInBtn = clerk.mountSignIn(loginContainer);
    }

    clerk.addListener(({ user }) => {
        if (user) {
            userStatus.textContent = `Logged in as: ${user.firstName}`;
            content.style.display = 'block';
            loginContainer.style.display = 'none';
        } else {
            userStatus.textContent = 'Not logged in';
            content.style.display = 'none';
            loginContainer.style.display = 'block';
        }
    });
}

async function pingServer() {
    const pingResult = document.getElementById('ping-result');
    try {
        const response = await fetch(`${API_URL}/ping`, {
            headers: {
                'Authorization': `Bearer ${await clerk.session.getToken()}`
            }
        });
        const data = await response.json();
        pingResult.textContent = `Server response: ${data.message}`;
    } catch (error) {
        pingResult.textContent = `Error: ${error.message}`;
    }
}

document.addEventListener('DOMContentLoaded', () => {
    initializeClerk();
    const pingBtn = document.getElementById('ping-btn');
    pingBtn.addEventListener('click', pingServer);
});import redis
import json
import random
from datetime import datetime, timedelta
import uuid

# Connect to Redis
redis_client = redis.Redis(host='localhost', port=6379, db=0)

def generate_user():
    return {
        'id': str(uuid.uuid4()),
        'name': f"SimUser_{random.randint(1000, 9999)}",
        'age': random.randint(18, 65),
        'preferences': {
            'max_age_difference': random.randint(1, 20),
            'interests': random.sample(['reading', 'hiking', 'movies', 'cooking', 'travel', 'music', 'sports', 'art'], k=random.randint(1, 5)),
            'location': random.choice(['New York', 'Los Angeles', 'Chicago', 'Houston', 'Phoenix']),
            'relationship_goal': random.choice(['casual', 'long-term', 'friendship']),
            'education_level': random.choice(['high school', 'bachelor', 'master', 'phd'])
        },
        'is_simulated': True
    }

def generate_match(user1_id, user2_id):
    match_time = (datetime.now() - timedelta(days=random.randint(0, 30))).timestamp()
    return {
        'user1_id': user1_id,
        'user2_id': user2_id,
        'match_time': match_time,
        'is_simulated': True
    }

def generate_user_activity(user_id):
    now = datetime.now()
    for _ in range(random.randint(1, 20)):
        login_time = (now - timedelta(days=random.randint(0, 30))).timestamp()
        redis_client.zadd(f'user_logins:{user_id}', {login_time: login_time})

def generate_communication(user1_id, user2_id):
    now = datetime.now()
    for _ in range(random.randint(0, 50)):
        message_time = (now - timedelta(days=random.randint(0, 30))).timestamp()
        message = {
            'from': user1_id,
            'to': user2_id,
            'content': f"Simulated message {random.randint(1000, 9999)}",
            'timestamp': message_time,
            'is_simulated': True
        }
        redis_client.lpush(f'messages:{user1_id}:{user2_id}', json.dumps(message))

def main():
    # Generate users
    users = [generate_user() for _ in range(1000)]
    
    # Save users to Redis
    for user in users:
        redis_client.set(f"user:{user['id']}", json.dumps(user))
        generate_user_activity(user['id'])
    
    # Generate matches
    for _ in range(500):
        user1, user2 = random.sample(users, 2)
        match = generate_match(user1['id'], user2['id'])
        redis_client.set(f"match:{match['user1_id']}:{match['user2_id']}", json.dumps(match))
        generate_communication(user1['id'], user2['id'])
    
    print("Simulated data generation complete.")

if __name__ == "__main__":
    main()body {
    font-family: Arial, sans-serif;
    max-width: 800px;
    margin: 0 auto;
    padding: 20px;
    text-align: center;
}

h1 {
    color: #333;
}

button {
    background-color: #4CAF50;
    border: none;
    color: white;
    padding: 15px 32px;
    text-align: center;
    text-decoration: none;
    display: inline-block;
    font-size: 16px;
    margin: 4px 2px;
    cursor: pointer;
}

#ping-result {
    margin-top: 20px;
    font-weight: bold;
}

#user-status {
    margin-bottom: 20px;
    font-style: italic;
}from models import User, Match
import random

def calculate_compatibility_score(user1, user2):
    score = 0
    
    # Age preference
    age_diff = abs(user1.age - user2.age)
    if age_diff <= user1.preferences['max_age_difference']:
        score += 20
    
    # Interests
    common_interests = set(user1.preferences['interests']) & set(user2.preferences['interests'])
    score += len(common_interests) * 10
    
    # Location
    if user1.preferences['location'] == user2.preferences['location']:
        score += 20
    
    # Relationship goals
    if user1.preferences['relationship_goal'] == user2.preferences['relationship_goal']:
        score += 30
    
    # Education level
    if user1.preferences['education_level'] == user2.preferences['education_level']:
        score += 10
    
    return score

def create_match(redis_client, user_id):
    user = User.get(redis_client, user_id)
    if not user:
        return None

    potential_matches = User.get_all(redis_client, include_simulated=user.is_simulated)
    potential_matches = [u for u in potential_matches if u.id != user.id]
    
    if not potential_matches:
        return None
    
    compatibility_scores = [
        (match, calculate_compatibility_score(user, match))
        for match in potential_matches
    ]
    
    compatibility_scores.sort(key=lambda x: x[1], reverse=True)
    top_matches = compatibility_scores[:3]
    selected_match, score = random.choice(top_matches)
    
    new_match = Match(user.id, selected_match.id, score, is_simulated=user.is_simulated)
    new_match.save(redis_client)
    
    return new_match.to_dict()
